@mixin generate-margin-padding($numbers) {
  $default-value: 4px;
  $sides: (top, bottom, left, right);
  @for $number from 0 through $numbers {
    $pixels: $default-value * $number;
    @if $number == 0 {
      .m-#{$number} {
        margin: 0;
      }
    } @else {
      .m-#{$number} {
        margin: #{$pixels};
      }
    }
    @each $side in $sides {
      @if $number == 0 {
        .m#{str-slice($side, 0, 1)}-#{$number} {
          margin-#{$side}: 0;
        }
      } @else {
        .m#{str-slice($side, 0, 1)}-#{$number} {
          margin-#{$side}: #{$pixels};
        }
      }
    }
  }

  @for $number from 0 through $numbers {
    $pixels: $default-value * $number;
    @if $number == 0 {
      .p-#{$number} {
        padding: 0;
      }
    } @else {
      .p-#{$number} {
        padding: #{$pixels};
      }
    }
    @each $side in $sides {
      @if $number == 0 {
        .p#{str-slice($side, 0, 1)}-#{$number} {
          padding-#{$side}: 0;
        }
      } @else {
        .p#{str-slice($side, 0, 1)}-#{$number} {
          padding-#{$side}: #{$pixels};
        }
      }
    }
  }
}

@include generate-margin-padding(1);
